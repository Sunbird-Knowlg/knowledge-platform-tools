import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { startWith, map } from 'rxjs/operators';
import { Validators } from '@angular/forms';
import * as appConstants from '../../constants/app-constant';
import { labels } from '../../labels/strings';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "../../services/framework.service";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/material/input";
import * as i8 from "@angular/material/autocomplete";
import * as i9 from "@angular/material/core";
export class CreateTermComponent {
    constructor(dialogRef, data, frameWorkService, fb) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.frameWorkService = frameWorkService;
        this.fb = fb;
        this.name = '';
        this.termLists = [];
        this.disableCreate = false;
        this.isTermExist = false;
        this.selectedTerm = {};
        this.app_strings = labels;
    }
    ngOnInit() {
        this.termLists = this.data.columnInfo.children;
        this.initTermForm();
    }
    initTermForm() {
        this.createTermForm = this.fb.group({
            name: ['', [Validators.required]],
            description: [''],
            area: [''],
            type: ['']
        });
        this.filtedTermLists = this.createTermForm.get('name').valueChanges.pipe(startWith(''), map(value => this._filter(value || '')));
    }
    _filter(searchTxt) {
        let isExist;
        this.disableCreate = false;
        this.isTermExist = false;
        this.createTermForm.get('description').enable();
        this.createTermForm.get('area').enable();
        this.createTermForm.get('type').enable();
        // this.createTermForm.get('description').patchValue('')
        const filterValue = typeof (searchTxt) === 'object' ? this._normalizeValue(searchTxt.name) : this._normalizeValue(searchTxt);
        isExist = this.termLists.filter(term => this._normalizeValue(term.name).includes(filterValue));
        return isExist;
    }
    _normalizeValue(value) {
        return value.toLowerCase().replace(/\s/g, '');
    }
    onSelect(term) {
        this.selectedTerm = term.value;
        this.createTermForm.get('name').patchValue(term.value.name);
        this.createTermForm.get('description').patchValue(term.value.description);
        this.createTermForm.get('description').disable();
        this.createTermForm.get('area').patchValue(term.value.area);
        this.createTermForm.get('area').disable();
        this.createTermForm.get('type').patchValue(term.value.type);
        this.createTermForm.get('type').disable();
        this.disableCreate = true;
    }
    saveTerm() {
        if (this._filter(this.createTermForm.value.name).length > 0) {
            this.isTermExist = true;
            console.log('Already exist');
            return;
        }
        if (this.createTermForm.valid) {
            const term = {
                code: this.frameWorkService.getUuid(),
                name: this.createTermForm.value.name,
                description: this.createTermForm.value.description,
                status: appConstants.LIVE,
                approvalStatus: appConstants.DRAFT,
                parents: [
                    { identifier: `${this.data.columnInfo.identifier}` }
                ],
                additionalProperties: {}
            };
            const requestBody = {
                request: {
                    term: term
                }
            };
            this.frameWorkService.createTerm(this.data.frameworkId, this.data.columnInfo.code, requestBody).subscribe((res) => {
                requestBody.request.term['identifier'] = res.result.node_id[0];
                this.dialogClose({ term: requestBody.request.term, created: true });
                this.selectedTerm = requestBody.request.term;
                this.updateTerm();
            });
        }
    }
    updateTerm() {
        let associations = [];
        let temp;
        let counter = 0;
        let localIsExist = false;
        this.frameWorkService.selectionList.forEach((parent, i) => {
            counter++;
            temp = parent.children ? parent.children.filter(child => child.identifier === this.selectedTerm.identifier) : null;
            associations = parent.children ? parent.children.map(c => {
                return { identifier: c.identifier }; // approvalStatus: c.associationProperties?c.associationProperties.approvalStatus: 'Draft'
            }) : [];
            if (temp && temp.length) {
                this.isTermExist = true;
                return;
            }
            else {
                associations.push({ identifier: this.selectedTerm.identifier }); // approvalStatus: appConstants.DRAFT 
                this.isTermExist = false;
                const reguestBody = {
                    request: {
                        term: {
                            associations: [
                                ...associations
                            ]
                        }
                    }
                };
                // console.log('***************************',associations)
                // this.dialogClose({ term: this.selectedTerm, created: true })
                this.frameWorkService.updateTerm(this.data.frameworkId, parent.category, parent.code, reguestBody).subscribe((res) => {
                    counter--;
                    if (counter === 0) {
                        // this.selectedTerm['associationProperties']['approvalStatus'] = 'Draft';
                        this.dialogClose({ term: { ...this.selectedTerm, ...{ associationProperties: { approvalStatus: 'Draft' } } }, created: true });
                    }
                });
            }
        });
    }
    dialogClose(term) {
        this.frameWorkService.publishFramework().subscribe(res => {
            this.dialogRef.close(term);
        });
    }
}
CreateTermComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: CreateTermComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }, { token: i2.FrameworkService }, { token: i3.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
CreateTermComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: CreateTermComponent, selector: "lib-create-term", ngImport: i0, template: "<div class=\"dialog\">\n    <div class=\"dialog-title\" mat-dialog-title>{{app_strings.createNew}} {{data.columnInfo.name}}</div>\n    <form [formGroup]=\"createTermForm\" novalidate (ngSubmit)=\"disableCreate?updateTerm():saveTerm()\">\n        <mat-form-field>\n            <!-- <mat-label>Enter {{data.name}} name</mat-label> -->\n            <input matInput formControlName=\"name\" placeholder=\"{{app_strings.name}}\"   [matAutocomplete]=\"auto\">\n            <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onSelect($event.option)\">\n                <mat-option *ngFor=\"let option of filtedTermLists | async\"  [value]=\"option\">\n                  {{option.name}}\n                </mat-option>\n              </mat-autocomplete>\n        </mat-form-field>\n        <mat-error *ngIf=\"isTermExist\">{{app_strings.alreadyExist}}</mat-error>\n        <mat-form-field>\n            <!-- <mat-label>Enter {{data.name}} name</mat-label> -->\n            <textarea matInput formControlName=\"description\" placeholder=\"{{app_strings.description}}\"></textarea>\n        </mat-form-field>\n        <mat-form-field>\n            <!-- <mat-label>Enter {{data.area}} area</mat-label> -->\n            <input matInput formControlName=\"name\" placeholder=\"{{app_strings.area}}\"   [matAutocomplete]=\"auto\">\n        </mat-form-field>\n        <mat-form-field>\n            <!-- <mat-label>Enter {{data.type}} type</mat-label> -->\n            <input matInput formControlName=\"name\" placeholder=\"{{app_strings.name}}\"   [matAutocomplete]=\"auto\">\n        </mat-form-field>\n         <footer class=\"actions\">\n            <button mat-raised-button color=\"default\" type=\"reset\" (click)=\"dialogClose('')\">{{app_strings.cancel}}</button>\n            <button mat-raised-button color=\"primary\" type=\"submit\" cdkFocusInitial *ngIf=\"!disableCreate\">{{app_strings.create}}</button>\n            <button mat-raised-button color=\"primary\" type=\"submit\" cdkFocusInitial *ngIf=\"disableCreate\">{{app_strings.update}}</button>\n        </footer>\n    </form>\n</div>\n", styles: [".dialog .mat-dialog-title{padding:1em;margin-bottom:0;background:#EEEEEE}.dialog .mat-form-field{width:90%;padding:0;background:#FFFFFF;margin:1em;border-radius:2px}.dialog .mat-form-field-outline{color:#fff}.dialog .mat-form-field ::ng-deep .mat-form-field-wrapper{padding-bottom:0}.dialog .mat-form-field ::ng-deep .mat-form-field-wrapper .mat-form-field-infix{padding:15px;margin-top:0;border-top:0}.dialog .mat-form-field ::ng-deep .mat-form-field-wrapper .mat-form-field-infix textarea{resize:none}.dialog .mat-form-field-disabled{background:#EEEEEE}.dialog .actions{display:flex;flex-direction:row;justify-content:space-between;padding:0 1em 1em}.dialog .mat-error{padding:0 25px;margin-top:-10px}.dialog-title{align-items:center;display:flex}::ng-deep .custom-dialog-container .mat-dialog-container{width:500px;padding:0;border-radius:0;background:#EEEEEE}@media only screen and (max-width: 1024px){::ng-deep .cdk-overlay-pane{width:40%!important}}@media only screen and (max-width: 992px){::ng-deep .cdk-overlay-pane{width:45%!important}}@media only screen and (max-width: 1024px){.dialog{font-size:12px}.dialog .dialog-title{font-size:24px;height:1em}.dialog button{font-size:12px;line-height:3.5em}.dialog .mat-raised-button{padding:0 3em}}\n"], dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i5.MatError, selector: "mat-error", inputs: ["id"] }, { kind: "component", type: i5.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { kind: "component", type: i6.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "directive", type: i7.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "directive", type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "component", type: i8.MatAutocomplete, selector: "mat-autocomplete", inputs: ["disableRipple"], exportAs: ["matAutocomplete"] }, { kind: "directive", type: i8.MatAutocompleteTrigger, selector: "input[matAutocomplete], textarea[matAutocomplete]", exportAs: ["matAutocompleteTrigger"] }, { kind: "component", type: i9.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: CreateTermComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-create-term', template: "<div class=\"dialog\">\n    <div class=\"dialog-title\" mat-dialog-title>{{app_strings.createNew}} {{data.columnInfo.name}}</div>\n    <form [formGroup]=\"createTermForm\" novalidate (ngSubmit)=\"disableCreate?updateTerm():saveTerm()\">\n        <mat-form-field>\n            <!-- <mat-label>Enter {{data.name}} name</mat-label> -->\n            <input matInput formControlName=\"name\" placeholder=\"{{app_strings.name}}\"   [matAutocomplete]=\"auto\">\n            <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onSelect($event.option)\">\n                <mat-option *ngFor=\"let option of filtedTermLists | async\"  [value]=\"option\">\n                  {{option.name}}\n                </mat-option>\n              </mat-autocomplete>\n        </mat-form-field>\n        <mat-error *ngIf=\"isTermExist\">{{app_strings.alreadyExist}}</mat-error>\n        <mat-form-field>\n            <!-- <mat-label>Enter {{data.name}} name</mat-label> -->\n            <textarea matInput formControlName=\"description\" placeholder=\"{{app_strings.description}}\"></textarea>\n        </mat-form-field>\n        <mat-form-field>\n            <!-- <mat-label>Enter {{data.area}} area</mat-label> -->\n            <input matInput formControlName=\"name\" placeholder=\"{{app_strings.area}}\"   [matAutocomplete]=\"auto\">\n        </mat-form-field>\n        <mat-form-field>\n            <!-- <mat-label>Enter {{data.type}} type</mat-label> -->\n            <input matInput formControlName=\"name\" placeholder=\"{{app_strings.name}}\"   [matAutocomplete]=\"auto\">\n        </mat-form-field>\n         <footer class=\"actions\">\n            <button mat-raised-button color=\"default\" type=\"reset\" (click)=\"dialogClose('')\">{{app_strings.cancel}}</button>\n            <button mat-raised-button color=\"primary\" type=\"submit\" cdkFocusInitial *ngIf=\"!disableCreate\">{{app_strings.create}}</button>\n            <button mat-raised-button color=\"primary\" type=\"submit\" cdkFocusInitial *ngIf=\"disableCreate\">{{app_strings.update}}</button>\n        </footer>\n    </form>\n</div>\n", styles: [".dialog .mat-dialog-title{padding:1em;margin-bottom:0;background:#EEEEEE}.dialog .mat-form-field{width:90%;padding:0;background:#FFFFFF;margin:1em;border-radius:2px}.dialog .mat-form-field-outline{color:#fff}.dialog .mat-form-field ::ng-deep .mat-form-field-wrapper{padding-bottom:0}.dialog .mat-form-field ::ng-deep .mat-form-field-wrapper .mat-form-field-infix{padding:15px;margin-top:0;border-top:0}.dialog .mat-form-field ::ng-deep .mat-form-field-wrapper .mat-form-field-infix textarea{resize:none}.dialog .mat-form-field-disabled{background:#EEEEEE}.dialog .actions{display:flex;flex-direction:row;justify-content:space-between;padding:0 1em 1em}.dialog .mat-error{padding:0 25px;margin-top:-10px}.dialog-title{align-items:center;display:flex}::ng-deep .custom-dialog-container .mat-dialog-container{width:500px;padding:0;border-radius:0;background:#EEEEEE}@media only screen and (max-width: 1024px){::ng-deep .cdk-overlay-pane{width:40%!important}}@media only screen and (max-width: 992px){::ng-deep .cdk-overlay-pane{width:45%!important}}@media only screen and (max-width: 1024px){.dialog{font-size:12px}.dialog .dialog-title{font-size:24px;height:1em}.dialog button{font-size:12px;line-height:3.5em}.dialog .mat-raised-button{padding:0 3em}}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i2.FrameworkService }, { type: i3.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,